//
// name: LAPPD.cc
// date: May 17, 2012
// author: Chien-Min Kao
// Description: programs to read and analyze root files generated by GATE
//                    for the dual-panel PET system
//

#include <fstream>
#include <iostream>
#include <cmath>
#include <stdio.h>
#include "PETscanner.h"

using namespace::std;

float inline len(float x, int y, int z)
{
	return sqrt(x*x+y*y+z*z);
}

int main(int argc, char **argv)
{
	// check syntax
	if (argc<2)
	{
		cout << "Usage: " << argv[0] << " <filename>";
		cout << " [<lld (keV)> <uld (keV)>] [<coinc window (ps)>]" << endl;
		return 1;
	}
	
	// load the Tree library is not already loaded
	if (!TClassTable::GetDict("Tree")) gSystem->Load("libTree.so");

	// open rootfile
	char rootfn[128];
	sprintf(rootfn, "%s.root", argv[1]);
	TFile *file = new TFile(rootfn);
	if (file->IsZombie())
	{
		cerr << "ERROR: open " << rootfn << " failed" << endl;
		return 2;
	}
			
	// setup access
	Coincidence c(file);
	
	// set energy window
	float lld=150, uld=750;                 // in keV, default = [0, 750]
	if (argc>=4)
	{
		sscanf(argv[2], "%f", &lld);
		sscanf(argv[3], "%f", &uld);
	}
	lld /= 1000., uld /= 1000.;            // convert from keV to MeV
	
	// set coincidence time window
	double ctw = 1000.0;                        // in picosecond, default = 1 nanosecond
	if (argc>=5) sscanf(argv[4], "%lf", &ctw);
	ctw *= 1e-12;
	
	// prepare output image
	float *img;
	float pixelsize = 2.0;                         // 2 mm
	float xfov=600, yfov=400, zfov=800;  // FOV = 600mmx400mmx800mm
	int    xlen = int(xfov/pixelsize), ylen = int(yfov/pixelsize), zlen = int(zfov/pixelsize);
	long  nimg = long(xlen)*ylen*zlen;      // number of elements
	img = new float[nimg];                      // allocate memory
	memset(img, 0, sizeof(float)*nimg);   // clear to all elements to zero
        long ntrue=0, nscatter=0, nrandom=0;
	
	// backprojection
	for (Long64_t n=0; n<c.GetNoOfEntries(); ++n)
	{
		// read a coincidence event
     		c.Fetch(n);
						
		// check if energy qualified
		if (!c.IsQualified(lld, uld)) continue;
		
		// check if coincidence window qualified
		if (!c.IsTOFWithin(ctw)) continue;
		
		// check if true event type
		if (c.IsTrue()) ++ntrue;
                else if (c.IsRandom()) ++nrandom;
                else ++nscatter;

                // update image
	        Vec3 p = c.TOFPos();
		int ix = ((p.x+300.)/2.);
		int iy = ((p.y+200.)/2.);
		int iz = ((p.z+400.)/2.);
		img[ix+(iy+iz*200L)*300L] += 1;
	}

        cout << ntrue << ", " << nscatter << ", " << nrandom << endl;	
	// done, close file, write image and exit with a success code
	file->Close();
	ofstream outf("test.raw", ios::out | ios::binary);
	outf.write((char *) img, nimg*sizeof(float));
	outf.close();
	return 0;
}
